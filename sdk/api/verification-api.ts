/* tslint:disable */
/* eslint-disable */
/**
 * Comm-Service API
 * Servicio central de comunicación y orquestación de confirmaciones/comandos entre admin y microservicios (trading, financial, ai, memory). 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { VerificationConfirmRequest } from '../models';
// @ts-ignore
import type { VerificationResult } from '../models';
// @ts-ignore
import type { VerificationStartRequest } from '../models';
// @ts-ignore
import type { VerificationStarted } from '../models';
/**
 * VerificationApi - axios parameter creator
 * @export
 */
export const VerificationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Confirmar OTP o token de magic link
         * @param {VerificationConfirmRequest} verificationConfirmRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1VerificationConfirmPost: async (verificationConfirmRequest: VerificationConfirmRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'verificationConfirmRequest' is not null or undefined
            assertParamExists('v1VerificationConfirmPost', 'verificationConfirmRequest', verificationConfirmRequest)
            const localVarPath = `/v1/verification/confirm`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(verificationConfirmRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Iniciar verificación por email o telegram (OTP o magic link)
         * @param {VerificationStartRequest} verificationStartRequest 
         * @param {string} [idempotencyKey] Clave para deduplicar solicitudes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1VerificationStartPost: async (verificationStartRequest: VerificationStartRequest, idempotencyKey?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'verificationStartRequest' is not null or undefined
            assertParamExists('v1VerificationStartPost', 'verificationStartRequest', verificationStartRequest)
            const localVarPath = `/v1/verification/start`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (idempotencyKey != null) {
                localVarHeaderParameter['Idempotency-Key'] = String(idempotencyKey);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(verificationStartRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VerificationApi - functional programming interface
 * @export
 */
export const VerificationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VerificationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Confirmar OTP o token de magic link
         * @param {VerificationConfirmRequest} verificationConfirmRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1VerificationConfirmPost(verificationConfirmRequest: VerificationConfirmRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VerificationResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1VerificationConfirmPost(verificationConfirmRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VerificationApi.v1VerificationConfirmPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Iniciar verificación por email o telegram (OTP o magic link)
         * @param {VerificationStartRequest} verificationStartRequest 
         * @param {string} [idempotencyKey] Clave para deduplicar solicitudes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1VerificationStartPost(verificationStartRequest: VerificationStartRequest, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VerificationStarted>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1VerificationStartPost(verificationStartRequest, idempotencyKey, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VerificationApi.v1VerificationStartPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * VerificationApi - factory interface
 * @export
 */
export const VerificationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VerificationApiFp(configuration)
    return {
        /**
         * 
         * @summary Confirmar OTP o token de magic link
         * @param {VerificationConfirmRequest} verificationConfirmRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1VerificationConfirmPost(verificationConfirmRequest: VerificationConfirmRequest, options?: RawAxiosRequestConfig): AxiosPromise<VerificationResult> {
            return localVarFp.v1VerificationConfirmPost(verificationConfirmRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Iniciar verificación por email o telegram (OTP o magic link)
         * @param {VerificationStartRequest} verificationStartRequest 
         * @param {string} [idempotencyKey] Clave para deduplicar solicitudes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1VerificationStartPost(verificationStartRequest: VerificationStartRequest, idempotencyKey?: string, options?: RawAxiosRequestConfig): AxiosPromise<VerificationStarted> {
            return localVarFp.v1VerificationStartPost(verificationStartRequest, idempotencyKey, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * VerificationApi - interface
 * @export
 * @interface VerificationApi
 */
export interface VerificationApiInterface {
    /**
     * 
     * @summary Confirmar OTP o token de magic link
     * @param {VerificationConfirmRequest} verificationConfirmRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VerificationApiInterface
     */
    v1VerificationConfirmPost(verificationConfirmRequest: VerificationConfirmRequest, options?: RawAxiosRequestConfig): AxiosPromise<VerificationResult>;

    /**
     * 
     * @summary Iniciar verificación por email o telegram (OTP o magic link)
     * @param {VerificationStartRequest} verificationStartRequest 
     * @param {string} [idempotencyKey] Clave para deduplicar solicitudes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VerificationApiInterface
     */
    v1VerificationStartPost(verificationStartRequest: VerificationStartRequest, idempotencyKey?: string, options?: RawAxiosRequestConfig): AxiosPromise<VerificationStarted>;

}

/**
 * VerificationApi - object-oriented interface
 * @export
 * @class VerificationApi
 * @extends {BaseAPI}
 */
export class VerificationApi extends BaseAPI implements VerificationApiInterface {
    /**
     * 
     * @summary Confirmar OTP o token de magic link
     * @param {VerificationConfirmRequest} verificationConfirmRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VerificationApi
     */
    public v1VerificationConfirmPost(verificationConfirmRequest: VerificationConfirmRequest, options?: RawAxiosRequestConfig) {
        return VerificationApiFp(this.configuration).v1VerificationConfirmPost(verificationConfirmRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Iniciar verificación por email o telegram (OTP o magic link)
     * @param {VerificationStartRequest} verificationStartRequest 
     * @param {string} [idempotencyKey] Clave para deduplicar solicitudes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VerificationApi
     */
    public v1VerificationStartPost(verificationStartRequest: VerificationStartRequest, idempotencyKey?: string, options?: RawAxiosRequestConfig) {
        return VerificationApiFp(this.configuration).v1VerificationStartPost(verificationStartRequest, idempotencyKey, options).then((request) => request(this.axios, this.basePath));
    }
}

